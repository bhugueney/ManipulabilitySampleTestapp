#include "Trajectory.h"

using namespace matrices;

Trajectory::Trajectory()
{
	// NOTHING
}

Trajectory::Trajectory(const T_TimePositions& timePositions)
	:  timePositions_(timePositions)
{
	//NOTHING
}

Trajectory::~Trajectory()
{
	// NOTHING
}

bool Trajectory::AddCheckPoint(float time, const Matrix4& transform)
{
	bool inserted = true;
	if(timePositions_.size() == 0) 
	{
		timePositions_.push_back(P_TimePosition(time, transform));
	}
	else
	{
		for(T_TimePositionsIT it = timePositions_.begin(); it!= timePositions_.end(); ++it)
		{
			float cTime = (*it).first;
			if(cTime > time)
			{
				timePositions_.insert(it, P_TimePosition(time, transform));
				break;
			}
			else if(cTime == time)
			{
				inserted = false;
				break;
			}
		}
	}
	return inserted;
}
