
#ifndef _CLASS_POSTURESOLVER
#define _CLASS_POSTURESOLVER

#include "kinematic/SampleGeneratorVisitor_ABC.h"
#include "MatrixDefs.h"

#include <memory>
#include <vector>

class Sample;
class SampleGenerator;
class World;
class Robot;
class Tree;
class Trajectory;

struct PosturePImpl;

/* parses sampled configurations in order to find an appropriate posture given a previous posture, 
the current trajectory and the world*/

class PostureCreatedListener_ABC
{
public:
	 PostureCreatedListener_ABC(){};
	~PostureCreatedListener_ABC(){};

public:
	virtual void OnPostureCreated(const Robot* /*pRobot*/) = 0; // TODO posture destroyed ?
};

class PostureSolver
{
public:
	typedef std::vector<Robot*>		 T_Robots;
	typedef T_Robots::iterator		 T_RobotsIT;
	typedef T_Robots::const_iterator T_RobotsCIT;

public:
	 PostureSolver(const World& /*world*/); // todo direciton / trajectory
	~PostureSolver();

public:
	void   RegisterPostureListener(		 PostureCreatedListener_ABC& /*listener*/);
	bool UnregisterPostureListener(const PostureCreatedListener_ABC& /*listener*/);

public:
	const T_Robots& CreatePostures(const Robot& /*previousTransform*/, const SampleGenerator& /*sampleGenerator*/, const Trajectory& /*trajectory*/);
	Robot*		    CreatePosture (const Robot& /*previousTransform*/, const SampleGenerator& /*sampleGenerator*/, const matrices::Matrix4& /*transform*/);

private:
	void MatchTree(Robot& /*robot*/, Tree& /*tree*/, const SampleGenerator& /*sampleGenerator*/);  // Gets sampled tree configuration that suits the best to constraints

private:
	std::auto_ptr<PosturePImpl> pImpl_;
};

#endif //_CLASS_POSTURESOLVER