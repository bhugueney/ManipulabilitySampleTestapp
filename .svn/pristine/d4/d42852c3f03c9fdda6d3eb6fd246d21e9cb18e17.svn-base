#include "Simulation.h"

#include <time.h>

using namespace manip_core;

Simulation* Simulation::instance;

Simulation::Simulation()
	: manager_()
	, simpParams_()
	, pRobot(0)
	, timerHandler_()
	, postureManager_(manager_.GetPostureManager())
	, motionHandler_(manager_)
	, drawManager_(manager_)
{
	srand((unsigned int)(time(0))); //Init Random generation
	// TODO
}

Simulation::~Simulation()
{
	// TODO
	delete postureManager_;
}

namespace simspace
{
	void start()
	{
		Simulation* sim = Simulation::GetInstance();
		sim->simpParams_.GetCamera()->Update();
	}

	void simLoop(int pause)
	{
		Simulation* sim = Simulation::GetInstance();
		sim->Update();
		sim->Draw();
	}
}

void Simulation::Start(int argc, char *argv[])
{
	srand((unsigned int)(time(0))); //Init Random generation
	//init robot
	
	simpParams_.buildWorld();

	pRobot = manager_.CreateRobot(simpParams_.robotType_, simpParams_.robotBasis_);
	dRobot = new DrawRobot(pRobot);
	postureManager_->SetJumpToTarget(simpParams_.jumpToTarget_);
	postureManager_->InitSamples(pRobot,10000);

    simpParams_.fn_.version = DS_VERSION;
    simpParams_.fn_.start   = &simspace::start;
    simpParams_.fn_.step    = &simspace::simLoop;
	simpParams_.fn_.command = simpParams_.command;
    simpParams_.fn_.stop    = 0;

	timerHandler_.Register(&motionHandler_);
	timerHandler_.Start();
    dsSimulationLoop (argc,argv,800,600, &simpParams_.fn_);
}

void Simulation::Update()
{
	timerHandler_.Update();
	timerHandler_.GetTimer().Stop();
	simpParams_.GetCamera()->Update();
	if(simpParams_.inputHandler_)
	{
		simpParams_.inputHandler_->Update();
	}
	timerHandler_.GetTimer().Start();
}

void Simulation::Draw()
{
	drawManager_.Draw();
	dRobot->Draw();
}

void Simulation::Reset()
{
	delete dRobot;
	delete pRobot;
	pRobot = manager_.CreateRobot(simpParams_.robotType_, simpParams_.robotBasis_);
	dRobot = new DrawRobot(pRobot);
	simpParams_.GetCamera()->Reset();
	motionHandler_.Reset();
}
