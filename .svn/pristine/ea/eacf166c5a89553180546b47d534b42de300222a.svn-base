
#include "DrawObstacle.h"
#include <drawstuff/drawstuff.h> // The drawing library for ODE;
#include "world/Obstacle.h"

#ifdef WIN32
#include <windows.h>
#endif

#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <GL/glui.h>

using namespace matrices;

DrawObstacle::DrawObstacle(const matrices::Vector3& p1, const matrices::Vector3& p2, const matrices::Vector3& p3, const matrices::Vector3& p4)
{
	float w_ = (float)((p3 - p4).norm());
	float h_ = (float)((p1 - p4).norm());
	matrices::Vector3 center = p1 + ((p4 - p1) + (p2 - p1)) / 2 ;
	pos_[0] = center.x();
	pos_[1] = center.y();
	pos_[2] = center.z();

	sides_[0] = w_;
	sides_[1] = h_;
	sides_[2] =  0.01f;

	Vector3 normal = (p3 - p4).cross(p1 - p4);

	Matrix4 basis_ = Matrix4::Zero();
	Vector3 x = (p3 - p4); x.normalize();
	Vector3 y = (p1 - p4); y.normalize();
	normal.normalize();
	basis_.block(0,0,3,1) = x;
	basis_.block(0,1,3,1) = y;
	basis_.block(0,2,3,1) = normal;
	basis_.block(0,3,3,1) = p4;
	basis_(3,3) = 1;
	
	matrices::matrixToArray(R_, basis_);

}

DrawObstacle::~DrawObstacle()
{
	// TODO
}

void DrawObstacle::Draw() const
{
	dsSetColor(1.0f, 1.0f, 1.0f);
	dsDrawBox (pos_, R_, sides_);
}

void DrawObstacle::DrawRed() const
{
	dsSetColor(1.0f, 0.0f, 0.0f);
	dsDrawBox (pos_, R_, sides_);
}
