#include "Trajectory.h"

using namespace matrices;

Trajectory::Trajectory()
{
	// NOTHING
}

Trajectory::Trajectory(const T_TimePositions& timePositions)
	:  timePositions_(timePositions)
{
	//NOTHING
}

Trajectory::~Trajectory()
{
	// NOTHING
}

bool Trajectory::AddCheckPoint(float time, const Vector3& position)
{
	bool inserted = false;
	for(T_TimePositionsIT it = timePositions_.begin(); it!= timePositions_.end(); ++it)
	{
		float cTime = (*it).first;
		if(cTime == time)
		{
			return false;
		}
		else if(cTime > time)
		{
			timePositions_.insert(it, P_TimePosition(time, position));
			inserted = true;
			return true;
		}
	}
	if(!inserted)
	{
		timePositions_.push_back(P_TimePosition(time, position));
		return true;
	}
	return false;
}

const Trajectory::T_TimePositions& Trajectory::GetTimePositions() const
{
	return timePositions_;
}

