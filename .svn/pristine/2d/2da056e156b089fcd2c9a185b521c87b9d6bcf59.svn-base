
#ifndef _CLASS_ROBOT
#define _CLASS_ROBOT

#include "MatrixDefs.h"
#include "ComVisitor_ABC.h"
#include "kinematic/Tree.h"

#include <memory>
#include <vector>

struct RobotPImpl;

class RobotVisitor_ABC;
class World;

class Robot
{

public:
	typedef std::vector<Tree*>		T_Tree;
	typedef T_Tree::iterator		T_TreeIT;
	typedef T_Tree::const_iterator	T_TreeCIT;

public:
	 explicit Robot(const matrices::Matrix4& /*transform*/); //basis switch
	~Robot();

//configure
public:
	void AddTree		(Tree* tree);
	void AddTorsoAndHead(Tree* tree);

//helpers
public:
	void  Accept(RobotVisitor_ABC& /*visitor*/) const;
	const matrices::Matrix4& ToWorldCoordinates() const;
	const matrices::Matrix4& ToRobotCoordinates() const;
	const unsigned int GetNumTrees() const;
	Tree* GetTree(Tree::TREE_ID /*id*/) const;
	const Tree* GetTorso() const;
	const T_Tree& GetTrees() const;
	matrices::Vector3 ComputeCom() const;

//action
public:
	void Move(const matrices::Vector3& /*direction*/, const World& /*world*/); 
	void Reset(); 
	void Translate(const matrices::Vector3& /*direction*/); 
	void SetPosOri(const matrices::Matrix4& /*transform*/); 
	void Rest(); 

	Robot* Clone() const;

private:
	std::auto_ptr<RobotPImpl> pImpl_;
	unsigned int numTrees_;
};

#endif //_CLASS_ROBOT