#include "PostureSolver.h"

#include "World.h"
#include "ObstacleVisitor_ABC.h"
#include "Obstacle.h"
#include "Trajectory.h"

#include "kinematic/FilterDistanceObstacle.h"
#include "kinematic/SampleGenerator.h"
#include "kinematic/Sample.h"
#include "kinematic/Tree.h"
#include "kinematic/Robot.h"

#include <math.h>
#include <vector>
#include <list>

using namespace matrices;
using namespace std;

struct PosturePImpl : public SampleGeneratorVisitor_ABC
{
	EIGEN_MAKE_ALIGNED_OPERATOR_NEW
	PosturePImpl(const World& world)
		: SampleGeneratorVisitor_ABC()
		, world_(world)
		, currentBest_(0)
		, currentBestManip_(0)
	{
		//NOTHING
	}
	~PosturePImpl()
	{
		for(PostureSolver::T_RobotsIT it = postures_.begin(); it != postures_.end(); ++it)
		{
			delete(*it);
		}
	}

	virtual void Visit(Sample& sample)
	{
		//TODO Manipulability and other constraints here
		NUMBER manip = sample.forceManipulabiliy(currentDir_);
		if(manip > currentBestManip_ )
		{
			currentBest_ = &sample;
			currentBestManip_ = manip;
		}
	}
	
	typedef std::list<PostureCreatedListener_ABC*> T_Listener;
	typedef T_Listener::iterator T_ListenerIT;
	typedef T_Listener::const_iterator T_ListenerCIT;

	void WarnListeners(Robot* robot)
	{
		for(T_ListenerIT it = listeners_.begin(); it != listeners_.end(); ++it)
		{
			(*it)->OnPostureCreated(robot);
		}
	}

	const World& world_;
	Sample* currentBest_;
	Vector3 currentDir_;
	NUMBER currentBestManip_;
	PostureSolver::T_Robots postures_;
	T_Listener listeners_;
};

struct ReachableObstaclesContainer : public ObstacleVisitor_ABC
{
	ReachableObstaclesContainer(const World& world, const Tree& tree, const Robot& robot)
		: ObstacleVisitor_ABC()
		, world_(world)
		, tree_ (tree)
		, robot_(robot)
	{
		// NOTHING
	}

	~ReachableObstaclesContainer()
	{
		// NOTHING
	}

	virtual void Visit(const Obstacle& obstacle)
	{
		if(world_.IsReachable(robot_, tree_, obstacle))
			obstacles_.push_back(&obstacle);
	}

	typedef std::vector<const Obstacle*> T_Obstacles;
	typedef T_Obstacles::const_iterator T_ObstaclesCIT;

	T_Obstacles obstacles_;
	const World& world_;
	const Tree&  tree_ ;
	const Robot& robot_;
};


PostureSolver::PostureSolver(const World& world)
	: pImpl_(new PosturePImpl(world))
{
	//NOTHING
}

PostureSolver::~PostureSolver()
{
	// NOTHING
}

void PostureSolver::MatchTree(Robot& robot, Tree& tree, const SampleGenerator& sampleGenerator)
{
	// Collecting reachable obstacles
	ReachableObstaclesContainer obstacles(pImpl_->world_, tree, robot);
	pImpl_->world_.Accept(obstacles);
	for(ReachableObstaclesContainer::T_ObstaclesCIT it = obstacles.obstacles_.begin(); it!= obstacles.obstacles_.end(); ++it)
	{
		FilterDistanceObstacle filter(0.2, (*(*it)), robot);
		sampleGenerator.Request(tree, *pImpl_, filter);
		if(pImpl_->currentBest_)
		{
			pImpl_->currentBest_->LoadIntoTree(tree);
			tree.Compute();
			tree.LockTarget(matrices::matrix4TimesVect3(robot.ToWorldCoordinates(), pImpl_->currentBest_->GetPosition()));
		}
	}
	pImpl_->currentBest_ = 0 ;// TODO make method const
	pImpl_->currentBestManip_ = 0 ;// TODO make method const
}

Robot* PostureSolver::CreatePosture(const Robot& robot, const SampleGenerator& sampleGenerator, const matrices::Matrix4& transform)
{
	Robot* res = robot.Clone();
	res->SetPosOri(transform);
	// TODO find appropriately wich tree to move
	Tree::TREE_ID id = res->IncreaseGait();
	Tree* tree = res->GetTree(id);
	// tree was locked -> lift it
	if(tree->IsLocked())
	{
		tree->UnLockTarget();
	}
	else
	{
		MatchTree(*res, *tree, sampleGenerator);
	}
	pImpl_->WarnListeners(res);
	return res;
}


const PostureSolver::T_Robots& PostureSolver::CreatePostures(const Robot& previousTransform, const SampleGenerator& sampleGenerator, const Trajectory& trajectory)
{
	Robot* previousPosture(0);
	const Trajectory::T_TimePositions& timepos = trajectory.GetTimePositions();
	Vector3 oldPosition;
	if(timepos.size() > 1)
	{
		//retrieving first trajectory
		Trajectory::T_TimePositionsCIT it = timepos.begin();
		Trajectory::T_TimePositionsCIT it2 = it; ++it2;
		oldPosition = (*it).second.block(0,3,3,1);
		pImpl_->currentDir_ = ((*it2).second.block(0,3,3,1) - oldPosition);
		pImpl_->currentDir_.normalize();
		previousPosture = CreatePosture(previousTransform, sampleGenerator, (*it).second);
		++it;
		for(; it != timepos.end(); ++it)
		{
			++it2;
			if(it2 != timepos.end())
			{
				pImpl_->currentDir_ = ((*it2).second.block(0,3,3,1) - oldPosition);
				pImpl_->currentDir_.normalize();
				oldPosition = (*it2).second.block(0,3,3,1);
			}
			pImpl_->postures_.push_back(previousPosture);
			previousPosture = CreatePosture(*previousPosture, sampleGenerator, (*it).second);
		}
	}
	return pImpl_->postures_;
}

void PostureSolver::RegisterPostureListener(PostureCreatedListener_ABC& listener)
{
	pImpl_->listeners_.push_back(&listener);
	for(PostureSolver::T_RobotsIT it = pImpl_->postures_.begin(); it != pImpl_->postures_.end(); ++it)
	{
		listener.OnPostureCreated(*it);
	}
}

bool PostureSolver::UnregisterPostureListener(const PostureCreatedListener_ABC& listener)
{
	//TODO
	return false;
}

