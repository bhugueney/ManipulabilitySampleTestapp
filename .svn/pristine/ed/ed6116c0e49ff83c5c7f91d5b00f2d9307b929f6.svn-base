#include "kinematic/Tree.h"
#include "kinematic/MatrixDefs.h"

#include "kinematic/Pi.h"

#include <drawstuff/drawstuff.h> // The drawing library for ODE;

#define RADIAN(X)	((X)*RadiansToDegrees)

using namespace matrices;

Joint* test; // TO F... REMOVE

void BuildTree(Joint *node[], Tree &tree)
{
	const Vector3 unitx(1, 0, 0);
	const Vector3 unity(0, 1, 0);
	const Vector3 unitz(0, 0, 1);
	const Vector3 unit1(sqrt(14.0)/8.0, 1.0/8.0, 7.0/8.0);
	const Vector3 zero(0,0,0);

	//node[0] = new Joint(Vector3(0.0f, -0.5f, 0.0f), unit1,JOINT, RADIAN(-180.), RADIAN(180.), RADIAN(30.));
	node[0] = new Joint(Vector3(0.0, 5, 0.0), unitz,JOINT, RADIAN(-180.), RADIAN(180.), RADIAN(30.));
	tree.InsertRoot(node[0]);

	node[1] = new Joint(Vector3(0.0, 0.4, 0.0), unitz,JOINT, RADIAN(-180.), RADIAN(180.), RADIAN(30.));
	tree.InsertChild(node[0], node[1]);

	node[2] = new Joint(Vector3(0.0, 1.2, 0.0), zero,EFFECTOR);
	tree.InsertChild(node[1], node[2]);
	test = node[0]; // to remove
}


/**
Drawstuff stuff : 
*/

static void DrawJoint( Joint* joint )
{
	Vector3 pos = joint->GetS();
	Vector3 rot = joint->GetW();
	//double ps[3] = {pos.x(), pos.y(), pos.z()};
	double ps[3] = {0, 1, 0};
	double R[12] = {1,0,0,0,0,1,0,0,0,0,1,0};
	dsDrawSphereD (ps, R, 100);
}


static void simLoop (int pause)
{
    dsSetColor(1.0,0.0,0.0);
	DrawJoint(test);
}

void start()
{
    static float xyz[3] = {0.0,-3.0,1.0};
    static float hpr[3] = {90.0,0.0,0.0};
    dsSetViewpoint (xyz,hpr);
}



int main(int argc, char *argv[])
{
	Tree treeY;
	//Jacobian *jacobY;
	Joint* joints[3];
	BuildTree(joints,treeY);
	treeY.Init();
	treeY.Compute();
	/*
	drawstuff stuff*/
	dsFunctions fn;
    fn.version = DS_VERSION;
    fn.start   = &start;
    fn.step    = &simLoop;
    fn.command = 0;
    fn.stop    = 0;
    fn.path_to_textures = "./textures";
    dsSimulationLoop (argc,argv,352,288,&fn);

    return 0;
}
