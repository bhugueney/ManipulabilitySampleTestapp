#include "API/ExactCubic.h"

namespace spline
{
struct CubicPImpl{
	CubicPImpl()
	{
		// NOTHING
	}

	~CubicPImpl()
	{
		// NOTHING
	}
};
} // namespace spline

using namespace spline;

ExactCubic::ExactCubic(const T_Waypoint& waypoints)
{
	assert(waypoints.size() > 2);
	// refer to the paper to understand all this.
	MatrixX  x = MatrixX::Zero(waypoints.size(), 3);
	MatrixX h1 = MatrixX::Zero(waypoints.size(), 3);
	MatrixX h2 = MatrixX::Zero(waypoints.size(), 3);
	MatrixX h3 = MatrixX::Zero(waypoints.size(), 3);
	MatrixX h4 = MatrixX::Zero(waypoints.size(), 3);
	MatrixX h5 = MatrixX::Zero(waypoints.size(), 3);
	MatrixX h6 = MatrixX::Zero(waypoints.size(), 3);

	Real dTi, dTi_1; // dTi = t_i+1 - t_i
	Real t_previous = waypoints[0].first;
	CIT_Waypoint it = waypoints.begin(); ++it;
	CIT_Waypoint it2 = it; ++it2; //going one step ahead
	for (; it2 != waypoints.end(); ++ it2)
	{
		++it;
		dTi = it->first - t_previous; // computing delta ti
		dTi_1 = it2->first - it->first; // computing delta ti + 1 
		t_previous = it->first;
	}
}

ExactCubic::~ExactCubic()
{
	// NOTHING
}

Vector3 ExactCubic::Evaluate(const Real t) const
{
	return Vector3(0,0,0);
}

void ExactCubic::Evaluate(const Real t, Vector3& Evaluate) const
{

}