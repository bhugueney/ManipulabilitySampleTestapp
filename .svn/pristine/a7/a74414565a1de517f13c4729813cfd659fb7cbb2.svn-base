
#include <Eigen/Dense>

#ifndef _MATRIXDEFS
#define _MATRIXDEFS

namespace matrices
{

	typedef Eigen::Vector3d Vector3;

	/* Rotates rotated around axis by angle theta, and returns it */
	// TODO forward dec
	static Vector3& Rotate(const Vector3& axis, Vector3& rotated, double theta)
	{
	double x  = rotated.x(); double y  = rotated.y(); double z = rotated.z();
	double x1 = axis.x(); double y1 = axis.y(); double z1 = axis.z();

	double c = cos(theta);
	double s = sin(theta);
	double dotw = (x*x1 + y*y1 + z*z1);
	double v0x = dotw*x1;
	double v0y = dotw*y1;		// v0 = provjection onto axis
	double v0z = dotw*z1;
	double v1x = x-v0x;
	double v1y = y-v0y;			// v1 = projection onto plane normal to axis
	double v1z = z-v0z;
	double v2x = y1*v1z - z1*v1y;
	double v2y = z1*v1x - x1*v1z;	// v2 = axis * v1 (cross product)
	double v2z = x1*v1y - y1*v1x;
	
	x = v0x + c*v1x + s*v2x;
	y = v0y + c*v1y + s*v2y;
	z = v0z	+ c*v1z + s*v2z;
	return rotated;
}

};

#endif //_MATRIXDEFS