/**
* \file OptimizeSpline.h
* \brief Optimization loop for cubic spline generations
* \author Steve T.
* \version 0.1
* \date 06/17/2013
*
* This file uses the mosek library to optimize the waypoints location
* to generate exactCubic spline
*/

#ifndef _CLASS_OPTIMIZESPLINE
#define _CLASS_OPTIMIZESPLINE

#include "Exports.h" 

#include "API/MathDefs.h" 
#include "API/Curve_ABC.h" 

#include <memory>

namespace spline
{
struct OptimizePImpl; //private implementation

/// \class OptimizeSpline
/// \brief Singleton using a mosek optimiser to produce splines
/// A singleton is used to initialize the mosek library
class OptimizeSpline
{
/* Constructors - destructors */
private:
	///\brief Initializes optimizer environment
	OptimizeSpline();

	///\brief Destructor
	~OptimizeSpline();

private:
	OptimizeSpline(const OptimizeSpline&);
	OptimizeSpline& operator=(const OptimizeSpline&);
/* Constructors - destructors */

/*Operations*/
public:
	/// \brief Starts an optimization loop to create curve
	///	\param waypoints : a list comprising at least 2 waypoints in ascending time order
	/// \return An Optimised curve
	SPLINE_API Curve_ABC* GenerateOptimizedCurve(const T_Waypoint& /*waypoints*/);
/*Operations*/

/*Helpers*/
public:
	/// \brief Accessor to the OptimizeSpline Singleton
	SPLINE_API static OptimizeSpline* GetInstance()
	{
		if(!instance)
		{
			instance = new OptimizeSpline();
		}
		return instance;
	}
/*Helpers*/

/*Attributes*/
private:
	std::auto_ptr<OptimizePImpl> pImpl_;
	static OptimizeSpline* instance;
/*Attributes*/
};
} // namespace spline
#endif //_CLASS_OPTIMIZESPLINE
