
#ifndef _CLASS_IKSOLVER
#define _CLASS_IKSOLVER

#include "MatrixDefs.h"

class Tree;

class IKSolver {

public:
	 IKSolver( const float espilon = 0.01f, const float treshold = 0.01f );
	~IKSolver();

public:
	bool Step( Tree& /*tree*/, const matrices::Vector3& /*target*/ ) const; //true if target reached
	bool StepForceManipulability( Tree& /*tree*/, const matrices::Vector3& /*target*/, const matrices::Vector3& /*direction*/ ) const; //true if target reached
	bool StepForceAndAvoidManipulability( Tree& /*tree*/, const matrices::Vector3& /*target*/, const matrices::Vector3& /*direction*/ ) const; //true if target reached
	void PartialForceManDerivatives(Tree& /*tree*/, const matrices::Vector3& /*direction*/, Eigen::VectorXd& /*velocities*/) const;

private:
	bool ComputeJointVelocityNoNullSpace( Tree& /*tree*/, const matrices::Vector3& /*target*/, Eigen::VectorXd& /*velocities*/ ) const; //true if target reached
	void UpdateTree( Tree& /*tree*/, const Eigen::VectorXd& /*velocities*/ ) const; //true if target reached
	/*float PartialForceManDerivative(Tree& tree, int joint);
	Eigen::VectorXd PartialForceManDerivatives(Tree& tree);*/

	void PartialForceManDerivative (Tree& /*tree*/, const matrices::Vector3& /*direction*/, Eigen::VectorXd& /*velocities*/, const int /*joint*/) const;
	void PartialAvoidSingularities( Tree& /*tree*/, const matrices::Vector3& /*target*/,    Eigen::VectorXd& /*velocities*/ ) const; //true if target reached
	//void PartialForceManDerivatives(Tree& /*tree*/, const matrices::Vector3& /*direction*/, Eigen::VectorXd& /*velocities*/) const;
	const float epsilon_;
	const float treshold_;
};

#endif //_CLASS_IKSOLVER