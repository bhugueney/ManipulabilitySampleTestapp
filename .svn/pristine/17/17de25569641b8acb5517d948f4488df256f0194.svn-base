
#ifndef _CLASS_ROBOT
#define _CLASS_ROBOT

#include "MatrixDefs.h"

#include <memory>
struct RobotPImpl;

class RobotVisitor_ABC;
class Tree;
class World;

class Robot {

public:
	Robot(const matrices::Matrix4& /*transform*/); //basis switch
	~Robot();

//configure
public:
	void AddTree( Tree* tree );

//helpers
public:
	void Accept(RobotVisitor_ABC& /*visitor*/) const;
	const matrices::Matrix4& ToWorldCoordinates() const;
	const matrices::Matrix4& ToRobotCoordinates() const;
//action
public:
	void Move( const matrices::Vector3& /*direction*/, const World& /*world*/ ); 
	void Translate( const matrices::Vector3& /*direction*/ ); 
	void Rest(); 

private:
	std::auto_ptr<RobotPImpl> pImpl_;
};

#endif //_CLASS_ROBOT