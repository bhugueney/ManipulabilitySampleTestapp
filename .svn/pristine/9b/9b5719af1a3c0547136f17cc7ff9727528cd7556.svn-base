
#ifndef _CLASS_SIMULATION
#define _CLASS_SIMULATION

#include "MatrixDefs.h"
#include "Pi.h"

#include "ExactCubic.h"
#include "draw/DrawSpline.h"

#include "TimerHandler.h"
#include "Camera.h"
#include "InputHandler.h"

#include "ManipManager.h"
#include "PostureManager.h"
#include "MotionHandler.h"

#include "drawstuff/drawstuff.h"
#include "draw/DrawRobot.h"
#include "draw/DrawManager.h"
#include "draw/DrawTrajectory.h"

#include "API/TreeI.h"
#include "API/RobotI.h"
#include "API/IkConstraintHandlerI.h"


struct SimParams
{
	SimParams()
		: nbSamples_(10000)
		, jumpToTarget_(false)
		, robotBasis_(matrices::MatrixX::Identity(4,4))
		, robotType_(manip_core::enums::robot::Human)
		, inputHandler_(0)
	{
		fn_.path_to_textures = "../textures";
		buildWorld = 0;
		command = 0;
		camera_ = new Camera_ABC(matrices::Vector3(0,0,5), matrices::Vector3(0,0,0));
	}

	~SimParams()
	{
		delete camera_;
		if(inputHandler_)
		{
			delete inputHandler_;
		}
	}

	int nbSamples_;
	bool jumpToTarget_;
	matrices::Matrix4 robotBasis_;
	void (*buildWorld)();
	void (*command)(int cmd);
	dsFunctions fn_;
	manip_core::enums::robot::eRobots robotType_;
	InputHandlerABC* inputHandler_;

	void SetCamera(Camera_ABC* camera)
	{
		delete camera_;
		camera_ = camera;
	}

	Camera_ABC* GetCamera()
	{
		return camera_;
	}

	private:
		Camera_ABC* camera_;
};


class Simulation {
	
private:
	  Simulation();
	 ~Simulation();

public:
	void Start(int argc, char *argv[]);
	void Update();
	void Draw();
	void Reset();
	
public:
	TimerHandler timerHandler_;
	manip_core::ManipManager manager_;
	DrawManager drawManager_;
	manip_core::PostureManager* postureManager_;

public:
	manip_core::RobotI* pRobot;
	DrawRobot* dRobot;

public:
	SimParams simpParams_;
	MotionHandler motionHandler_;

private:
	static Simulation* instance;
	

public:
	static Simulation* GetInstance()
	{
		if(!instance)
		{
			instance = new Simulation();
		}
		return instance;
	}
}; // Timer

#endif //_CLASS_SIMULATION