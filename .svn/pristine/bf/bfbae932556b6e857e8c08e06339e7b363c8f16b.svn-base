
#include "Tree.h"
#include "Joint.h"
#include "MatrixDefs.h"
#include "math.h"
#include "Sample.h"
#include "IKSolver.h"
#include "Jacobian.h"


using namespace matrices;
using namespace Eigen;

Tree::Tree()
: sphereRadius_(0)
, lock_(false)
{
	directionForce_  = Vector3( 0, 1, 0 );
	directionVel_ = Vector3( 1, 0, 0 );
	target_ = Vector3( 1, 0, 0 );
	root = 0;
	nJoint = nEffector = nJoint = 0;
}

Tree::~Tree()
{
	Joint* n = this->GetRoot();
	Joint* n1 = n;
	while ( n )
	{
		n = n->pChild_;
		delete n1;
		n1 = n;
	}
}

void Tree::ToRest()
{
	Joint* j = GetRoot();
	while(j)
	{
		j->ToRest();
		j = j->pChild_;
	}
	Compute();
}

void Tree::SetSeqNum(Joint* joint)
{
	switch (joint->purpose_) {
	case JOINT:
		joint->seqNumJoint_ = nJoint++;
		joint->seqNumEffector_ = -1;
		break;
	case EFFECTOR:
		joint->seqNumJoint_ = -1;
		joint->seqNumEffector_ = nEffector++;
		break;
	}
}

void Tree::InsertRoot(Joint* root)
{
	assert(nJoint == 0);
	nJoint++;
	Tree::root = root;
	root->r_ = root->attach_;
	assert(!(root->pChild_));
	SetSeqNum(root);
	//sphereRadius_ += root->r_.norm();
}

void Tree::InsertChild(Joint* parent, Joint* child)
{
	assert(parent);
	parent->pChild_ = child;
	child->pRealparent_ = parent;
	child->r_ = child->attach_ - child->pRealparent_->attach_;
	sphereRadius_ += child->r_.norm();
	assert( !(child->pChild_) );
	SetSeqNum(child);
}

// Search recursively below "Joint" for the Joint with index value.
Joint* Tree::SearchJoint(Joint* joint, int index) const
{
	Joint* ret(0);
	if (joint != 0)
	{
		if (joint->seqNumJoint_ == index)
		{
			ret = joint;
		}
		else
		{
			ret = SearchJoint(joint->pChild_, index);
		}
	} 
	return ret;
}

// Search recursively below Joint for the end effector with the index value
Joint* Tree::SearchEffector(Joint* joint, int index) const
{
	Joint* ret(0);
	if (joint != 0)
	{
		if (joint->seqNumEffector_ == index)
		{
			ret = joint;
		} 
		else
		{
			ret = SearchEffector(joint->pChild_, index);
		}
	}
	return ret;
}

// Get the joint with the index value
Joint* Tree::GetJoint(int index) const
{
	return SearchJoint(root, index);
}

// Get the end effector for the index value
Joint* Tree::GetEffector(int index) const
{
	return SearchEffector(root, index);
}

// Returns the global position of the effector.
const Vector3& Tree::GetEffectorPosition(int index) const
{
	Joint* effector = GetEffector(index);
	assert(effector);
	return (effector->s_);  
}

void Tree::ComputeTree(Joint* joint)
{
	if (joint != 0) {
		joint->ComputeS();
		joint->ComputeW();
		ComputeTree(joint->pChild_);
	}
}

void Tree::Compute(void)
{ 
	ComputeTree(root); 
}

// Recursively initialize this below the Joint
void Tree::InitTree(Joint* joint)
{
	if (joint != 0)
	{
		joint->InitJoint();
		InitTree(joint->pChild_);
	}
}

// Initialize all Joints in the this
void Tree::Init(void)
{
	InitTree(root);
	ToRest();
	referenceTarget_ = GetEffectorPosition(GetNumEffector()-1);
	jacobian_ = new Jacobian(*this);
}

void Tree::ComputeJacobian() 
{
	jacobian_->Compute(*this);
	jacobianProduct = jacobian_->GetJacobianProduct();
	jacobianInverse = jacobian_->GetJacobianInverse();
	jacobianProductInverse = jacobian_->GetJacobianProductInverse();
	Identitymin = jacobian_->GetNullspace();
}

float Tree::ComputeForceManipulability() const
{
	float r = ((directionForce_).transpose()*jacobianProduct*(directionForce_));
	return 1/sqrt(r);
}


float Tree::ComputeVelocityManipulability() const
{
	float r = ((directionVel_).transpose()*jacobianProductInverse*(directionVel_));
	return 1/sqrt(r);
}

float Tree::ComputeForceManipulability(const Vector3& direction) const
{
	float r = (direction.transpose()*jacobianProduct*direction);
	return 1/sqrt(r);
}


float Tree::ComputeVelocityManipulability(const Vector3& direction) const
{
	float r = (direction.transpose()*jacobianProductInverse*direction);
	return 1/sqrt(r);
}

float Tree::ComputeManipulability() const
{
	return sqrt(jacobianProduct.determinant());
}

const matrices::Vector3& Tree::GetPosition() const
{
	Joint* n = this->GetRoot();
	n->ComputeS();
	return n->GetS();
}
