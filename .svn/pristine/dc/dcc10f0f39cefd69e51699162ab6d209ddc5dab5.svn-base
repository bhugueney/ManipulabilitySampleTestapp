
#include "DrawPostures.h"
#include "DrawRobot.h"

#include "PostureSolver.h"
#include "MatrixDefs.h"

#include <drawstuff/drawstuff.h> // The drawing library for ODE;

#include <vector>

using namespace std;
using namespace matrices;

struct DrawPosturePImpl : PostureCreatedListener_ABC
{
	DrawPosturePImpl(PostureSolver& solver)
		: PostureCreatedListener_ABC()
		, solver_(solver)
	{
		solver_.RegisterPostureListener(*this);
	}

	~DrawPosturePImpl()
	{
		solver_.UnregisterPostureListener(*this);
		for(T_DrawRobotIT it = drawRobots_.begin(); it != drawRobots_.end(); ++it)
		{
			delete(*it);
		}
	}

	virtual void OnPostureCreated(const Robot* pRobot)
	{
		drawRobots_.push_back(new DrawRobot(*pRobot));
	}

	typedef vector<DrawRobot*> T_DrawRobot;
	typedef T_DrawRobot::iterator T_DrawRobotIT;
	typedef T_DrawRobot::const_iterator T_DrawRobotCIT;
	T_DrawRobot drawRobots_;
	PostureSolver& solver_;
};



//TODO listener in case of adding new trees
DrawPostures::DrawPostures(PostureSolver& solver)
	: pImpl_(new DrawPosturePImpl(solver))
{
	// TODO
}

DrawPostures::~DrawPostures()
{
	// TODO
}

void DrawPostures::Draw() const
{
	for(DrawPosturePImpl::T_DrawRobotCIT it = pImpl_->drawRobots_.begin(); it != pImpl_->drawRobots_.end(); ++it)
	{
		(*it)->Draw();
	}
}
